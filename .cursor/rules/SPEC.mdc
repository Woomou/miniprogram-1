---
alwaysApply: true
---

# 英语读音准确度测试小程序 - 项目规范文档 (SPEC)

## 📋 项目概述

### 项目名称
英语读音准确度测试小程序 (English Pronunciation Assessment Mini Program)

### 项目描述
一个基于微信小程序的英语读音准确度测试应用，帮助用户练习和评估英语单词的发音。通过语音识别技术分析用户发音，提供准确度评分和个性化改进建议。

### 项目目标
- 提供便捷的英语发音练习工具
- 实现智能的发音准确度评估
- 为用户提供个性化的发音改进建议
- 支持多种难度等级的单词练习

## 🏗️ 技术架构

### 开发框架
- **平台**: 微信小程序
- **语言**: TypeScript + JavaScript
- **样式**: SCSS
- **构建工具**: 自定义构建脚本
- **版本控制**: Git

### 技术栈
```
前端框架: 微信小程序原生开发
开发语言: TypeScript 4.x
样式预处理器: SCSS
构建工具: 自定义Shell脚本
测试工具: 微信开发者工具CLI
代码规范: ESLint + TypeScript规范
```

### 项目结构
```
miniprogram-1/
├── miniprogram/                    # 小程序源码目录
│   ├── app.js                      # 应用入口文件
│   ├── app.json                    # 应用配置文件
│   ├── app.scss                    # 全局样式文件
│   ├── pages/                      # 页面目录
│   │   ├── index/                  # 首页
│   │   ├── wordList/               # 单词列表页
│   │   └── pronunciation/          # 读音测试页
│   ├── utils/                      # 工具类目录
│   │   ├── wordData.js             # 单词数据管理
│   │   ├── pronunciation.js        # 发音分析工具
│   │   └── util.js                 # 通用工具
│   └── components/                 # 组件目录
├── typings/                        # TypeScript类型定义
├── project.config.json             # 项目配置文件
├── build.sh                        # 构建脚本
├── test.sh                         # 测试脚本
└── README.md                       # 项目说明文档
```

## 📱 功能规范

### 核心功能模块

#### 1. 单词列表模块 (WordList)
**功能描述**: 展示可测试的英语单词列表
**技术实现**:
- 数据源: `utils/wordData.js`
- 页面文件: `pages/wordList/`
- 交互方式: 点击选择单词

**数据规范**:
```typescript
interface Word {
  id: number;                    // 单词ID
  word: string;                  // 英文单词
  phonetic: string;              // 音标
  meaning: string;               // 中文含义
  difficulty: 'easy' | 'medium' | 'hard';  // 难度等级
  category?: string;             // 分类（可选）
}
```

**UI规范**:
- 卡片式布局设计
- 响应式交互效果
- 清晰的信息层次

#### 2. 读音测试模块 (Pronunciation)
**功能描述**: 核心测试功能，包含录音、识别、评估
**技术实现**:
- 录音API: `wx.getRecorderManager()`
- 识别服务: `utils/pronunciation.js`
- 评估算法: 编辑距离算法

**录音规范**:
```javascript
const options = {
  duration: 10000,        // 最长录音时间10秒
  sampleRate: 16000,      // 采样率16kHz
  numberOfChannels: 1,    // 单声道
  encodeBitRate: 96000,   // 编码码率96kbps
  format: 'mp3'           // 音频格式MP3
};
```

**评估算法规范**:
- 相似度计算: 基于编辑距离算法
- 错误分析: 元音和辅音错误检测
- 准确度评分: 0-100分制
- 反馈生成: 个性化建议

#### 3. 语音识别模块 (SpeechRecognition)
**功能描述**: 处理用户语音输入并转换为文本
**技术实现**:
- 当前: 模拟识别结果
- 可扩展: 第三方语音识别API

**API规范**:
```typescript
interface RecognitionResult {
  text: string;           // 识别结果文本
  confidence: number;     // 置信度 (0-1)
  accuracy: number;       // 准确度评分 (0-100)
  feedback: string;       // 反馈建议
}
```

# 英语读音准确度测试小程序 - 项目规范文档 (SPEC)

## 📋 项目概述

### 项目名称
英语读音准确度测试小程序 (English Pronunciation Assessment Mini Program)

### 项目描述
一个基于微信小程序的英语读音准确度测试应用，帮助用户练习和评估英语单词的发音。通过语音识别技术分析用户发音，提供准确度评分和个性化改进建议。

### 项目目标
- 提供便捷的英语发音练习工具
- 实现智能的发音准确度评估
- 为用户提供个性化的发音改进建议
- 支持多种难度等级的单词练习

## 🏗️ 技术架构

### 开发框架
- **平台**: 微信小程序
- **语言**: TypeScript + JavaScript
- **样式**: SCSS
- **构建工具**: 自定义构建脚本
- **版本控制**: Git

### 技术栈
```
前端框架: 微信小程序原生开发
开发语言: TypeScript 4.x
样式预处理器: SCSS
构建工具: 自定义Shell脚本
测试工具: 微信开发者工具CLI
代码规范: ESLint + TypeScript规范
```

### 项目结构
```
miniprogram-1/
├── miniprogram/                    # 小程序源码目录
│   ├── app.js                      # 应用入口文件
│   ├── app.json                    # 应用配置文件
│   ├── app.scss                    # 全局样式文件
│   ├── pages/                      # 页面目录
│   │   ├── index/                  # 首页
│   │   ├── wordList/               # 单词列表页
│   │   └── pronunciation/          # 读音测试页
│   ├── utils/                      # 工具类目录
│   │   ├── wordData.js             # 单词数据管理
│   │   ├── pronunciation.js        # 发音分析工具
│   │   └── util.js                 # 通用工具
│   └── components/                 # 组件目录
├── typings/                        # TypeScript类型定义
├── project.config.json             # 项目配置文件
├── build.sh                        # 构建脚本
├── test.sh                         # 测试脚本
└── README.md                       # 项目说明文档
```

## 📱 功能规范

### 核心功能模块

#### 1. 单词列表模块 (WordList)
**功能描述**: 展示可测试的英语单词列表
**技术实现**:
- 数据源: `utils/wordData.js`
- 页面文件: `pages/wordList/`
- 交互方式: 点击选择单词

**数据规范**:
```typescript
interface Word {
  id: number;                    // 单词ID
  word: string;                  // 英文单词
  phonetic: string;              // 音标
  meaning: string;               // 中文含义
  difficulty: 'easy' | 'medium' | 'hard';  // 难度等级
  category?: string;             // 分类（可选）
}
```

**UI规范**:
- 卡片式布局设计
- 响应式交互效果
- 清晰的信息层次

#### 2. 读音测试模块 (Pronunciation)
**功能描述**: 核心测试功能，包含录音、识别、评估
**技术实现**:
- 录音API: `wx.getRecorderManager()`
- 识别服务: `utils/pronunciation.js`
- 评估算法: 编辑距离算法

**录音规范**:
```javascript
const options = {
  duration: 10000,        // 最长录音时间10秒
  sampleRate: 16000,      // 采样率16kHz
  numberOfChannels: 1,    // 单声道
  encodeBitRate: 96000,   // 编码码率96kbps
  format: 'mp3'           // 音频格式MP3
};
```

**评估算法规范**:
- 相似度计算: 基于编辑距离算法
- 错误分析: 元音和辅音错误检测
- 准确度评分: 0-100分制
- 反馈生成: 个性化建议

#### 3. 语音识别模块 (SpeechRecognition)
**功能描述**: 处理用户语音输入并转换为文本
**技术实现**:
- 当前: 模拟识别结果
- 可扩展: 第三方语音识别API

**API规范**:
```typescript
interface RecognitionResult {
  text: string;           // 识别结果文本
  confidence: number;     // 置信度 (0-1)
  accuracy: number;       // 准确度评分 (0-100)
  feedback: string;       // 反馈建议
}
```

